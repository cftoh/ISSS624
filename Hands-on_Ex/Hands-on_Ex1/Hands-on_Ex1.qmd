---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
---

## Overview

In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages.

## Getting Started!

The code chunk below install and load [sf](https://r-spatial.github.io/sf/) and tidyverse packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)

```

## Importing Geospatial Data

### Importing polygon feature data

```{r}

mpsq <- st_read(dsn = "data/geospatial", layer="MP14_SUBZONE_WEB_PL")

```

We will next have to save this file as a qmd (in this case Hands-on_Ex1.qmd)

Once done, save it \> click Render \> this will run our codes automatically. The beauty of this is that it teaches us how to create a reproducible data

To update the path from homepage, will then need to go back to the \_quarto.yml doc to update. Can also go Build to "Render website"

Sometimes we need to commit changes from time to time so we can track changes! Don't do it at the very end.

Useful Guide for learning Quarto: <https://quarto.org/docs/guide/>

### Importing Polyline feature data in shapefile form

Similiar to previous, use st_read() function of sf package, this round to import the CyclingPath shapefile into R as [line feature data frame]{.underline}.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", layer = "CyclingPathGazette")
```

### Importing GIS data in kml format

Next we look at the pre-schools-location-kml.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

The results show that this is a point feature data frame.

## Checking Content of a Simple Feature Data Frame

1.. Working with st_geometry()

The column in the sf data.frame that contains the geometries is a list, of class `sfc`

```{r}
st_geometry(mpsq)

```

2\. Working with glimpse()

To find out more about the associated attribute (e.g. data type of each fields) information in the data frame, use *glimpse()* of **dplyr.**

```{r}
glimpse(mpsq)
```

3\. Working with head()

To reveal complete info of a feature object, head() of Base R. Here we choose 5 records to display.

```{r}
head(mpsq, n=5)
```

## Plotting the Geospatial Data

Default plot of an sf object is a multi-plot of all attributes.

```{r}
plot(mpsq)
```

To plot only the geometry:

```{r}
plot(st_geometry(mpsq))
```

Can also plot using specific attributes

```{r}
plot(mpsq["PLN_AREA_N"])
```

## Working with Projection

Using projection transformation to project a simple feature data frame from one coordinate system to another coordinate system

One common issue is missing or wrong coordinate system in source data. In this code below, the end of it shows EPSG is 9001, the correct code for svy21 should be 3414.

```{r}
st_crs(mpsq)
```

To assign the correct EPSG code to data frame, use st_set_crs() of sf package. Then we checked and it has been updated.

```{r}
mpsq3414 <- st_set_crs(mpsq,3414)
```

```{r}
st_crs(mpsq3414)
```

To transform the projection of preschool from wgs84 to scy21

```{r}
preschool3414 <- st_transform(preschool,crs=3414)
```

Next display the content of the preschool3414 sf data frame, we can see the svy21 is the coordinate system now:

```{r}
st_geometry(preschool3414)
```

Importing and Converting Aspatial Data

Looking at the listings.csv from airbnb:

```{r}
listings <- read_csv("data/aspatial/listings.csv.gz")
```

To check the data:

```{r}
list(listings)
```

Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

To convert the listings dataframe into a simple feature data frame, use [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages:

```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude","latitude"),
                        crs=4326) %>%
  st_transform(crs =3414)
```

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

```{r}
glimpse(listings_sf)
```

Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

## Additional: Geoprocessing with sf package

st_buffer, st_area

[st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html), st_area(). mutate()

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)

buffer_cycling$AREA <- st_area (buffer_cycling)

sum(buffer_cycling$AREA)
```

```{r}
mpsq3414$`PreSch Count` <- lengths(st_intersects(mpsq3414, preschool3414))
summary(mpsq3414$`PreSch Count`)
```

```{r}
mpsq3414$Area <- mpsq3414 %>%
  st_area()

mpsq3414 <- mpsq3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)

```

## Explorotary Data Analysis

ggplot2 functions

```{r}
hist(mpsq3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsq3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

```{r}
ggplot(data=mpsq3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
