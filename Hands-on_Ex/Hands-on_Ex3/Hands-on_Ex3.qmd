---
title: "Hands-on Exercise 3: Spatial Weights and Applications"
date: "20 November 2023"
date-modified:  "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning:  false
editor: visual
---

Learning Objective:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute spatial weights using appropriate functions of **spdep** package, and

-   calculate spatially lagged variables using appropriate functions of **spdep** package.

Data Usage for this Exercise:

1.   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.
2.  Hunan_2012.csv: This csv file contains selected Hunan\'s local development indicators in 2012.

## Recap what we learnt in Lesson 1

First step is always to ensure the relevant packages are installed and loaded:

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

Next step is to ensure data gets loaded into R Environment

```{r}
#To load the first data source using st read of sf package, import into sf.
hunan <- st_read(dsn= "data/geospatial",layer = "Hunan")
```

```{r}
#import another data set using read_csv(), output is dataframe class
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")

```

Once we loaded the data sets into R environment, we can now perform relational join:

```{r}
hunan <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)
#joining the dataset of hunan2012 to hunan (base), and selecting only column 1-4, 7, 15.
```

Next, for visualisation using basemap and choropleth map, to show distribution of GDPPC 2012:

```{r}
basemap <- tm_shape(hunan) + tm_polygons() + tm_text("NAME_3", size =0.3)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2) #to put the two map side by side
```

##  Computing Contiguity Spatial Weights

[*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. Note we can pass a \"queen\" argument that takes TRUE or FALSE as options. Default is set to TRUE where this function will return a list of first order neighbours using the Queen criteria.

Looking at some examples:

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.

```{r}
head(wm_q, 3)
```

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:

```{r}
wm_q[[1]]
```

This show that Polygon #1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

We can retrive the county name of Polygon ID=1 by using the code chunk below:

```{r}
hunan$County[1]
```

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
hunan$County[c(2,3,4,57,85)]

```

To retrieve the GDPPC of these five countries:

```{r}
nb1 <- wm_q[[1]] 
nb1 <- hunan$GDPPC[nb1]
nb1
#Note: It is also possible to do a nested
hunan$GDPPC[wm_q[[1]]]
```

To display the complete weight matrix by using *str()*.

```{r}
str(wm_q)
```

Create ROOK contiguity based neighbours

```{r}
wm_r <-poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one neighbours.

### Visualising contiguity weights

A connectivity graph takes a point and displays a line to each
neighboring point.

Since the data set is with polygons, we will need to get points in order to make our connectivity graphs. The most typically method for this will be **polygon centroids**. We will need to [calculate]{.underline} these in the sf package before moving onto the graphs.

[Getting Latitude and Longitude of Polygon Centroids.]{.underline}

We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. which applies a given function to each element of a vector and returns a vector of the same length.

-   input vector : geometry column of us.bound.

-   function: st_centroid. We will be using map_dbl variation of map from the purrr package.

To get our [**longitude**]{.underline} values (first value in each centroid)

1.   map the st_centroid function over the geometry column of us.bound
2.  access the longitude value through double bracket notation \[\[\]\] and 1.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

To get our [**latitude**]{.underline} values (second value in each centroid)

1.   map the st_centroid function over the geometry column of us.bound
2.  access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

To put longitude and latitude into the same object:

```{r}
coords <- cbind(longitude, latitude)
```

Check the data

```{r}
head(coords)
```

#### Plotting [**Queen**]{.underline} contiguity based neighbours map

```{r}
plot(hunan$geometry, border = "lightgrey")
plot(wm_q, coords, pch= 19, cex=0.6, add= TRUE, col="red")
```

#### Plotting [**Rook**]{.underline} contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Plotting both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## Computing distance based neighbours

[*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package: The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument.

If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

### Determine the cut-off distance

To find upper limit for distance band:

```{r}
#coords <- coordinates(hunan)

k1 <- knn2nb(knearneigh(coords)) 
#Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other
#Convert the knn object returned into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids

k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))  
#Return the length of neighbour relationship edges by using nbdists() of spdep which returns in the units of the coordinates if the coordinates are projected, in km otherwise.
#Remove the list structure of the returned object by using unlist().

summary(k1dists)
```

The summary report shows that the largest first nearest neighbour
distance is 61.79 km, so using this as the upper threshold gives
certainty that all units will have at least one neighbour.

### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE) #using the 62 (from 61.79km previous calculated) as upper limit
wm_d62
```

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine [*table()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table) and [*card()*](https://r-spatial.github.io/spdep/reference/card.html) of spdep.

```{r}

table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

```{r}
#plot next to each other for comparison
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours.

Having many neighbours smoothes the neighbour relationship across more neighbours. It is possible to **control the numbers of neighbours** directly using [k-nearest neighbours]{.underline}, either accepting asymmetric neighbours or imposing symmetry as shown:

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6) #shows that each county has exactly six neighbours
```

#### Plotting distance based neighbours

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on Inversed Distance method IDW

First compute the distances between areas:

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon.
Each neighboring polygon will be assigned equal weight
(style=\"W\"). This is accomplished by assigning the fraction
1/(#ofneighbors) to each neighboring county then summing the weighted income values. One drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. Note that other more robust options are available, notably style=\"B\".

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbors. This
should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

To see the weight of the first polygon\'s eight neighbors type:

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor\'s income will be multiplied by 0.2 before being tallied.

To derive a row standardised distance weight matrix:

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

To create four different spatial lagged variables, they are:

1.  **spatial lag with row-standardized weights**

    The average neighbor GDPPC value for each polygon, these values are often referred to as **spatially lagged values**.

    ```{r}
    GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
    GDPPC.lag
    ```

    We can append the spatially lag GDPPC values onto hunan sf data frame by:

    ```{r}
    lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
    lag.res <- as.data.frame(lag.list)
    colnames(lag.res) <- c("NAME_3", "lag GDPPC")
    hunan <- left_join(hunan,lag.res)
    ```

    The following table shows the average neighboring income values (stored in the Inc.lag object) for each county.

    ```{r}
    head(hunan)
    ```

    Next, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.

    ```{r}
    gdppc <- qtm(hunan, "GDPPC")
    lag_gdppc <- qtm(hunan, "lag GDPPC")
    tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
    ```

2.  **spatial lag as a sum of neighbouring values**

    We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.

    We start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.

    ```{r}
    b_weights <- lapply(wm_q, function(x) 0*x + 1)
    b_weights2 <- nb2listw(wm_q, 
                           glist = b_weights, 
                           style = "B")
    b_weights2
    ```

    With the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.

    ```{r}
    lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
    lag.res <- as.data.frame(lag_sum)
    colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")

    lag_sum
    ```

    Next, we will append the *lag_sum GDPPC* field into `hunan` sf data frame by:

    ```{r}
    hunan <- left_join(hunan, lag.res)
    ```

    Now, We can plot both the *GDPPC* and *Spatial Lag Sum GDPPC* for comparison using the code chunk below.

    ```{r}
    gdppc <- qtm(hunan, "GDPPC")
    lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
    tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
    ```

3.  **spatial window average**

    The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

    To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

    ```{r}
    wm_qs <- include.self(wm_q)
    ```

    Notice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909

    ```{r}
    wm_qs[[1]]
    #it has six neighbours instead of five.
    ```

    ```{r}
    wm_qs <- nb2listw(wm_qs) #weights with nb2listw()
    wm_qs
    ```

    Again, we use *nb2listw()* and *glist()* to explicitly assign weight values. Finally we just need to create the lag variable from our weight structure and GDPPC variable

    ```{r}
    lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                                 hunan$GDPPC)
    lag_w_avg_gpdpc
    ```

    Next, we will convert the lag variable listw object into a data.frame by using *as.data.frame()*.

    ```{r}
    lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
    lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
    colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC") #renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.
    ```

    Next, below will be used to append *lag_window_avg GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package.

    ```{r}
    hunan <- left_join(hunan, lag_wm_qs.res)

    ```

    To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

    ```{r}
    hunan %>%
      select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
      kable()
    ```

    Lastly, *qtm()* of **tmap** package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.

    ```{r}
    w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
    tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
    ```

4.  **Spatial window sum**

    The spatial window sum is the counter part of the window average, but without using row-standardized weights.

    To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

    ```{r}
    wm_qs <- include.self(wm_q)
    wm_qs
    ```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1] #has six neighbours instead of five.
```

Again, we use *nb2listw()* and *glist()* to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with *lag.listw()*.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using *as.data.frame()*.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC") # renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively
```

Next, to append *w_sum GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table :

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, *qtm()* of **tmap** package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
