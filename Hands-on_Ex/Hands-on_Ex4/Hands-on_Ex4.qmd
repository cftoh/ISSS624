---
title: "Hands-on Exercise 3: Spatial Weights and Applications"
date: "21 November 2023"
date-modified:  "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning:  false
editor: visual
---

To compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using **spdep** package, learning objective:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;

-   compute Getis-Ord\'s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and

-   to visualise the analysis output by using **tmap** package.

### The Study Area and Data

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan\'s local development indicators in 2012.

### Setting the Analytical Toolls

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Getting the Data Into R Environment (per previous HOE)

### Import shapefile

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan") #output is simple features Object
```

### Import csv file

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv") #ouput is R data frame class
```

### Performing relational join

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

### Visualising Regional Development Indicator

```{r}
equal <- tm_shape(hunan) + tm_fill("GDPPC", n = 5, style = "equal") + tm_borders(alpha = 0.5) + tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) + tm_fill("GDPPC", n = 5, style = "quantile") + tm_borders(alpha = 0.5) + tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

##  Global Spatial Autocorrelation

To compute global spatial autocorrelation statistics and to perform
spatial complete randomness test for global spatial autocorrelation.

### Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

In the code chunk below, [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

### Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our
case, each neighboring polygon will be assigned equal weight
(style=\"W\"). This is accomplished by assigning the fraction
1/(#ofneighbors) to each neighboring county then summing the weighted
income values. While this is the most intuitive way to summaries the
neighbors\' values it has one drawback in that polygons along the edges
of the study area will base their lagged values on fewer polygons thus
potentially over- or under-estimating the true nature of the spatial
autocorrelation in the data. *For this example, we\'ll stick with the
style=\"W\" option for simplicity\'s sake but note that other more robust
options are available, notably style=\"B\".*

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

-   

-   *style* can take values \"W\", \"B\", \"C\", \"U\", \"minmax\" and \"S\".

    -   B is the basic binary coding,

    -   W is row standardised (sums over all links to n),

    -   C is globally standardised (sums over all links to n),

    -   U is equal to C divided by the number of neighbours (sums over all links to unity),

    -   S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

### Global Spatial Autocorrelation: Moran\'s I

### Maron\'s I test

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

####  Computing Monte Carlo Moran\'s 

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

#### Visualising Monte Carlo Moran\'s I

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

### Global Spatial Autocorrelation: Geary\'s

#### Geary\'s C test

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

#### Computing Monte Carlo Geary\'s C

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

#### Visualising the Monte Carlo Geary\'s C

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

## Spatial Correlogram

Spatial correlograms are great to examine patterns of spatial
autocorrelation in your data or model residuals. They show how
correlated are pairs of spatial observations when you increase the
distance (lag) between them - they are plots of some index of
autocorrelation (Moran\'s I or Geary\'s c) against distance.Although
correlograms are not as fundamental as variograms (a keystone concept of
geostatistics), they are very useful as an exploratory and descriptive
tool. For this purpose they actually provide richer information than
variograms.

### Compute Moran\'s I correlogram

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

By plotting the output might not allow us to provide complete
interpretation. This is because not all autocorrelation values are
statistically significant. Hence, it is important for us to examine the
full analysis report by printing out the analysis results:

```{r}
print(MI_corr)
```

### Compute Geary\'s C correlogram and plot

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

```{r}
print(GC_corr)
```
