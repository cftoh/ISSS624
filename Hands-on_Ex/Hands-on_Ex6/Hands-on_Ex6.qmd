---
title: "Hands-on Exercise 6: Spatial Weights and Applications"
date: "1 December 2023"
date-modified:  "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning:  false
editor: visual
---

Objective

-   to import and extract OD data for a selected time interval,

-   to import and save geospatial data (i.e.Â bus stops and mpsz) into sf tibble data frame objects,

-   to populate planning subzone code into bus stops sf tibble data frame,

-   to construct desire lines geospatial data from the OD data, and

-   to visualise passenger volume by origin and destination bus stops by using the desire lines data.

Data Set

-   BusStop: This data provides the location of bus stop as at last quarter of 2022.

-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.

-   *Passenger Volume by Origin Destination Bus Stops*

Getting Started

```{r}
pacman::p_load(tmap, sf, DT, stplanr,
               performance,
               ggpubr, tidyverse)
```

Import shapefile (geospatial) into R - busstop and MPSZ

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

Import csv (aspatial) into R (The Origin Destination, OD data)

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```

```{r}
glimpse(odbus)
```

For the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o\'clock.

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

Content of odbus6_9

```{r}
datatable(odbus6_9)
```

Save the data for future use (in rds format)

```{r}
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

Can use the following to read the data

```{r}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

Data Wrangling

Combining the two geospatial data:

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

```{r}
datatable(busstop_mpsz)

```

Save data for future use

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.rds")  
```

Performing the Relational Join (to update attribute table of one geospatial with another aspatial data set)

```{r}
od_data <- left_join(odbus6_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

Data Sanity check - for duplicate records

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

Noted 1180 duplicate record, so use the following to retain unique records

```{r}
od_data <- unique(od_data)
```

Next is to update the dataframe with planning subzone codes from the busstop_mpsz

```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 

duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

od_data <- unique(od_data)

od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

Save and read the file

```{r}
write_rds(od_data, "data/rds/od_data.rds")

od_data <- read_rds("data/rds/od_data.rds")
```

## Visualising Spatial Interaction

### Removing intra-zonal flows

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

### Creating desire lines

```{r}
flowLine <- od2line(flow = od_data1, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

### Visualising the desire lines

```{r}
tmap_options(check.and.fix = TRUE)
tm_shape(mpsz) +
  tm_polygons() +
  flowLine %>%  
  tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

When the flow data are very messy and highly skewed , it is wiser to focus on selected flows, for example flow greater than or equal to 5000 as shown below.

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```
